import requests
from urllib3 import disable_warnings, exceptions
import json
import openpyxl
from concurrent.futures import ThreadPoolExecutor

# Suppress warning produced from opting to not verify certificate.
disable_warnings(exceptions.InsecureRequestWarning)

def sign_in(base_server_url: str, site_id: str, token_name: str, token_value: str, verify_certificate: bool = True) -> dict | bool:
    sign_in_url = f'{base_server_url}/api/3.24/auth/signin'
    payload = {
        'credentials': {
            'personalAccessTokenName': token_name,
            'personalAccessTokenSecret': token_value,
            'site': {
                'contentUrl': site_id
            }
        }
    }
    headers = {
        'accept': 'application/json',
        'content-type': 'application/json'
    }
    try:
        sign_in_request = requests.post(sign_in_url, json=payload, headers=headers, verify=verify_certificate)
    except requests.exceptions.ProxyError as error:
        print(f"ProxyError: {error}")
        return False
    else:
        if sign_in_request.status_code != 200:
            print(f"Sign-in failed with status code: {sign_in_request.status_code}")
            return False
        sign_in_response = sign_in_request.json()
        token = sign_in_response['credentials']['token']
        site_luid = sign_in_response['credentials']['site']['id']
        headers['X-tableau-auth'] = token
        headers['site_luid'] = site_luid
    return headers

def delete_user(base_server_url: str, headers: dict, username: str, verify_certificate: bool = True) -> bool:
    users_url = f'{base_server_url}/api/3.24/sites/{headers["site_luid"]}/users'
    page_number = 1
    page_size = 100

    while True:
        paginated_url = f'{users_url}?pageSize={page_size}&pageNumber={page_number}'
        users_request = requests.get(paginated_url, headers=headers, verify=verify_certificate)
        
        if users_request.status_code != 200:
            print(f"Failed to retrieve users with status code: {users_request.status_code}")
            return False

        users_response = users_request.json()
        users = users_response['users']['user']
        
        for user in users:
            if user['name'].lower() == username.lower():
                print(f"Found user: {user['name']} with role: {user['siteRole']}")
                if user['siteRole'] == 'Viewer':
                    delete_url = f'{users_url}/{user["id"]}'
                    delete_request = requests.delete(delete_url, headers=headers, verify=verify_certificate)
                    if delete_request.status_code == 204:
                        print(f"User {username} deleted successfully.")
                        return True
                    else:
                        print(f"Failed to delete user {username} with status code: {delete_request.status_code}")
                        return False
                else:
                    print(f"User {username} does not have the 'Viewer' role.")
                    return False
        
        if len(users) < page_size:
            break
        
        page_number += 1
    
    print(f"User {username} not found.")
    return False

def sign_out(base_server_url: str, headers: dict, verify_certificate: bool = True) -> None:
    sign_out_url = f'{base_server_url}/api/3.24/auth/signout'
    requests.post(sign_out_url, headers=headers, verify=verify_certificate)

def get_usernames_from_excel(file_name: str) -> list:
    workbook = openpyxl.load_workbook(file_name)
    sheet = workbook.active
    usernames = [cell.value for cell in sheet['A'][1:]]  # Skip the heading name in the first row
    return usernames

def delete_users_parallel(base_server_url: str, headers: dict, usernames: list, verify_certificate: bool = True):
    with ThreadPoolExecutor(max_workers=10) as executor:
        results = list(executor.map(lambda username: delete_user(base_server_url, headers, username, verify_certificate), usernames))
    return results

# Sign-in to Tableau Server or Tableau Cloud instance.
headers = sign_in(
    base_server_url='https://tableau-servername',
    site_id='',
    token_name='',
    token_value='',
    verify_certificate=False
)

if headers:
    # Get usernames from Excel sheet
    usernames_to_delete = get_usernames_from_excel('DeletedUsers.xlsx')
    
    # Delete users in parallel
    results = delete_users_parallel('https://tableau-servernameo', headers, usernames_to_delete, verify_certificate=False)
    
    for username, result in zip(usernames_to_delete, results):
        if result:
            print(f"User {username} deleted successfully.")
        else:
            print(f"User {username} not found or could not be deleted.")

    # Sign-out of Tableau Server or Tableau Cloud instance.
    sign_out('https://tableau-servername', headers, verify_certificate=False)
else:
    print("Sign-in failed.")
